//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FIAS_Murt
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FIAS_PraktikaEntities : DbContext
    {
        public FIAS_PraktikaEntities()
            : base("name=FIAS_PraktikaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<adres_objects> adres_objects { get; set; }
        public virtual DbSet<Adres_zayavka> Adres_zayavka { get; set; }
        public virtual DbSet<Dokuments> Dokuments { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<GAR> GAR { get; set; }
        public virtual DbSet<History_adres> History_adres { get; set; }
        public virtual DbSet<Istor_izmen> Istor_izmen { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Type_status> Type_status { get; set; }
        public virtual DbSet<Type_uved> Type_uved { get; set; }
        public virtual DbSet<Type_zayavki> Type_zayavki { get; set; }
        public virtual DbSet<Uvedomleniya> Uvedomleniya { get; set; }
        public virtual DbSet<Zayavka> Zayavka { get; set; }
        public virtual DbSet<AdresZayavkaProsm> AdresZayavkaProsm { get; set; }
        public virtual DbSet<EmployeeActivity> EmployeeActivity { get; set; }
        public virtual DbSet<FullGAR> FullGAR { get; set; }
        public virtual DbSet<UvedProsm> UvedProsm { get; set; }
        public virtual DbSet<ZayavkaDetails> ZayavkaDetails { get; set; }
    
        public virtual ObjectResult<FullAddressDetails_Result> FullAddressDetails(Nullable<int> iD_GAR)
        {
            var iD_GARParameter = iD_GAR.HasValue ?
                new ObjectParameter("ID_GAR", iD_GAR) :
                new ObjectParameter("ID_GAR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FullAddressDetails_Result>("FullAddressDetails", iD_GARParameter);
        }
    
        public virtual ObjectResult<GetEmployee_Result> GetEmployee(Nullable<int> iD_Empl)
        {
            var iD_EmplParameter = iD_Empl.HasValue ?
                new ObjectParameter("ID_Empl", iD_Empl) :
                new ObjectParameter("ID_Empl", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployee_Result>("GetEmployee", iD_EmplParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertNewZayavka(string type_zayavki, string uroven, Nullable<int> iD_GAR, Nullable<int> sozdatel_zayav, Nullable<System.DateTime> data_sozdaniya, Nullable<System.DateTime> data_sozd2)
        {
            var type_zayavkiParameter = type_zayavki != null ?
                new ObjectParameter("Type_zayavki", type_zayavki) :
                new ObjectParameter("Type_zayavki", typeof(string));
    
            var urovenParameter = uroven != null ?
                new ObjectParameter("Uroven", uroven) :
                new ObjectParameter("Uroven", typeof(string));
    
            var iD_GARParameter = iD_GAR.HasValue ?
                new ObjectParameter("ID_GAR", iD_GAR) :
                new ObjectParameter("ID_GAR", typeof(int));
    
            var sozdatel_zayavParameter = sozdatel_zayav.HasValue ?
                new ObjectParameter("Sozdatel_zayav", sozdatel_zayav) :
                new ObjectParameter("Sozdatel_zayav", typeof(int));
    
            var data_sozdaniyaParameter = data_sozdaniya.HasValue ?
                new ObjectParameter("Data_sozdaniya", data_sozdaniya) :
                new ObjectParameter("Data_sozdaniya", typeof(System.DateTime));
    
            var data_sozd2Parameter = data_sozd2.HasValue ?
                new ObjectParameter("Data_sozd2", data_sozd2) :
                new ObjectParameter("Data_sozd2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertNewZayavka", type_zayavkiParameter, urovenParameter, iD_GARParameter, sozdatel_zayavParameter, data_sozdaniyaParameter, data_sozd2Parameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<UpdateUvedStatus_Result> UpdateUvedStatus(Nullable<int> iD_Uved, string newStatus, string newType_uved, Nullable<System.DateTime> newData_ispoln_1, string kommentarii, string prichina_otkaza)
        {
            var iD_UvedParameter = iD_Uved.HasValue ?
                new ObjectParameter("ID_Uved", iD_Uved) :
                new ObjectParameter("ID_Uved", typeof(int));
    
            var newStatusParameter = newStatus != null ?
                new ObjectParameter("NewStatus", newStatus) :
                new ObjectParameter("NewStatus", typeof(string));
    
            var newType_uvedParameter = newType_uved != null ?
                new ObjectParameter("NewType_uved", newType_uved) :
                new ObjectParameter("NewType_uved", typeof(string));
    
            var newData_ispoln_1Parameter = newData_ispoln_1.HasValue ?
                new ObjectParameter("NewData_ispoln_1", newData_ispoln_1) :
                new ObjectParameter("NewData_ispoln_1", typeof(System.DateTime));
    
            var kommentariiParameter = kommentarii != null ?
                new ObjectParameter("Kommentarii", kommentarii) :
                new ObjectParameter("Kommentarii", typeof(string));
    
            var prichina_otkazaParameter = prichina_otkaza != null ?
                new ObjectParameter("Prichina_otkaza", prichina_otkaza) :
                new ObjectParameter("Prichina_otkaza", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateUvedStatus_Result>("UpdateUvedStatus", iD_UvedParameter, newStatusParameter, newType_uvedParameter, newData_ispoln_1Parameter, kommentariiParameter, prichina_otkazaParameter);
        }
    
        public virtual ObjectResult<ZayavkaHistory_Result> ZayavkaHistory(Nullable<int> iD_GAR)
        {
            var iD_GARParameter = iD_GAR.HasValue ?
                new ObjectParameter("ID_GAR", iD_GAR) :
                new ObjectParameter("ID_GAR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZayavkaHistory_Result>("ZayavkaHistory", iD_GARParameter);
        }
    }
}
